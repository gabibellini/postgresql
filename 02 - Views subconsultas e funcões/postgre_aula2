SELECT * FROM curso;
SELECT * FROM categoria;

SELECT * FROM curso WHERE categoria_id = 1 OR categoria_id = 2;

-- usando IN avalia utilizando o operador de igual
SELECT * FROM curso WHERE categoria_id IN (1,2);

-- subconsulta
SELECT id FROM categoria WHERE nome NOT LIKE '% %';

SELECT * FROM curso WHERE categoria_id IN (
   SELECT id FROM categoria WHERE nome NOT LIKE '% %'
);

-- subquery dentro de um FROM

SELECT categoria.nome AS categoria,
       COUNT(curso.id) AS numero_cursos
  FROM categoria
  JOIN curso ON curso.categoria_id = categoria.id
GROUP BY categoria;

SELECT categoria
  FROM (
	       SELECT categoria.nome AS categoria,
                  COUNT(curso.id) AS numero_cursos
             FROM categoria
             JOIN curso ON curso.categoria_id = categoria.id
         GROUP BY categoria  
  ) AS categoria_cursos
 WHERE numero_cursos >= 3;

-- é possível usar uma subquery no filtro, no from é possível simplificar mais usando HAVING,
-- mas as situações que vão exigir uma possibilidade ou outra acontecerão na prática.

-- com HAVING

  SELECT curso.nome,
         COUNT(aluno_curso.aluno_id) numero_alunos
    FROM curso
    JOIN aluno_curso ON aluno_curso.curso_id = curso.id
GROUP BY 1
     HAVING COUNT(aluno_curso.aluno_id) > 2
ORDER BY numero_alunos DESC;

-- Usando FUNÇÕES
-- tudo visto até agora é genérico, mas as funções mudam de banco para banco.

SELECT (primeiro_nome ||' '|| ultimo_nome) AS nome_completo FROM aluno;

-- || é o operador de concatenação do postgre, no entanto se tiver algum campo NULL, ele devolve
-- tudo como NULL.

-- CONCAT é uma função para manipular string, inclusive permite juntar campos com NULL.

SELECT TRIM(UPPER(CONCAT ('Gabrielle', ' ', 'Bellini')) || ' ');

-- funções de data
-- ::DATE converte o NOW(), para a idade podemos usar direto AGE()

SELECT (primeiro_nome ||' '|| ultimo_nome) AS nome_completo, NOW(), data_nascimento FROM aluno;


SELECT (primeiro_nome ||' '|| ultimo_nome) AS nome_completo,
        EXTRACT(YEAR FROM AGE(data_nascimento)) AS idade
  FROM aluno;
  
-- Funções ARITMÉTICAS

SELECT pi();

-- CONVERSÃO DE DADOS

SELECT TO_CHAR(NOW(), 'DD/MM/YYYY');

SELECT TO_CHAR(128.3::REAL, '999D99');

-- Criando views
-- conceito de nomear uma consulta, utilizando uma tabela virtual - podem causar problemas
-- de performance, então tem que escolher onde é melhor usar ou fazer a consulta direto

CREATE VIEW vw_cursos_por_categoria AS SELECT categoria.nome AS categoria,
                   COUNT(curso.id) AS numero_cursos
             FROM categoria
             JOIN curso ON curso.categoria_id = categoria.id
         GROUP BY categoria;

SELECT * FROM vw_cursos_por_categoria;

SELECT categoria
  FROM vw_cursos_por_categoria AS categoria_cursos
 WHERE numero_cursos > 3;
 
CREATE VIEW vw_cursos_programacao AS SELECT nome FROM curso WHERE categoria_id = 2;

SELECT * FROM vw_cursos_programacao;

-- todos os filtros usados nas tableas podem ser utilizados com views:
-- WHERE, JOIN, etc.